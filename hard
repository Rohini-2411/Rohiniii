#include <stdio.h>
#include <string.h>

// Function to check if a string is a palindrome
int isPalindrome(char *str, int start, int end) {
    while (start < end) {
        if (str[start] != str[end]) {
            return 0; // Not a palindrome
        }
        start++;
        end--;
    }
    return 1; // Palindrome
}

// Function to find the shortest palindrome by adding characters in front
char* shortestPalindrome(char *s) {
    int len = strlen(s);
    int i;

    // Check if the string itself is already a palindrome
    if (isPalindrome(s, 0, len - 1)) {
        return s;
    }

    char* result = (char *)malloc(sizeof(char) * (2 * len + 1)); // Allocate memory for result

    // Find the longest palindrome starting from the first character
    for (i = len - 1; i >= 0; i--) {
        if (isPalindrome(s, 0, i)) {
            break;
        }
    }

    // Build the shortest palindrome by adding characters in front
    int k = 0;
    for (int j = len - 1; j > i; j--) {
        result[k++] = s[j];
    }
    result[k] = '\0';

    strcat(result, s); // Concatenate the original string to the constructed palindrome

    return result;
}

int main() {
char input[100];
    printf("Enter a string: ");
    scanf("%s", input);

    char* shortest_palindrome = shortestPalindrome(input);

    printf("Shortest Palindrome: %s\n", shortest_palindrome);

    free(shortest_palindrome); // Free dynamically allocated memory

    return 0;
}
